name: cms-store-backend

include:
  - ./compose/compose-infra.yaml

services:
  cms-init-s3:
    image: minio/mc
    restart: no
    container_name: cms-init-s3
    # ВНИМАНИЕ! Переменные окружения берутся из .env файла напрямую. Вопрос почему так и как так до конца не изучил
    # Используем minio client
    entrypoint: >
      sh -c
      "sleep 2
      && mc alias set myminio http://cms-infra-s3:9000 $MINIO_ACCESS_KEY $MINIO_SECRET_KEY
      && mc mb myminio/$MINIO_BUCKET || true
      && mc anonymous set download myminio/images"
    depends_on:
      - cms-infra-s3
    networks:
      - cms-store-network
  cms-backend-auth:
    build:
      context: ./cms-backend
      dockerfile: Dockerfile
      target: microservice-auth
    restart: unless-stopped
    container_name: cms-backend-auth
    environment:
      - SPRING_DATASOURCE_URL=${SPRING_DATASOURCE_URL_AUTH_SERVICE}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - KAFKA_BOOTSTRAP_SERVERS=${KAFKA_BOOTSTRAP_SERVERS}
      - YANDEX_CAPTCHA_SERVER_KEY=${YANDEX_CAPTCHA_SERVER_KEY}
    #    ports:
    #      - "8080:8080"
    depends_on:
      - cms-infra-database
      - cms-infra-kafka
    networks:
      - cms-store-network
  cms-manage-kafka-ui:
    image: provectuslabs/kafka-ui:latest
    restart: unless-stopped
    container_name: cms-manage-kafka-ui
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=cms-infra-kafka:9092
      - KAFKA_CLUSTERS_0_ZOOKEEPER=cms-infra-zookeeper:2181
      - AUTH_TYPE=LOGIN_FORM
      - SPRING_SECURITY_USER_NAME=admin
      - SPRING_SECURITY_USER_PASSWORD=pass
      - SERVER_SERVLET_CONTEXT_PATH=/kafka-ui
    #    ports:
    #      - "8091:8080"
    depends_on:
      - cms-infra-kafka
    networks:
      - cms-store-network
  cms-backend-user:
    build:
      context: ./cms-backend
      dockerfile: Dockerfile
      target: microservice-user
    restart: unless-stopped
    container_name: cms-backend-user
    environment:
      - SPRING_DATASOURCE_URL=${SPRING_DATASOURCE_URL_USER_SERVICE}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - KAFKA_BOOTSTRAP_SERVERS=${KAFKA_BOOTSTRAP_SERVERS}
      #    ports:
      #      - "8080:8080"
    depends_on:
      - cms-infra-database
      - cms-infra-kafka
    networks:
      - cms-store-network
  cms-backend-catalog:
    build:
      context: ./cms-backend
      dockerfile: Dockerfile
      target: microservice-catalog
    restart: unless-stopped
    container_name: cms-backend-catalog
    environment:
      - SPRING_DATASOURCE_URL=${SPRING_DATASOURCE_URL_CATALOG_SERVICE}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - S3_URL=${MINIO_URL}
      - S3_BUCKET=${MINIO_BUCKET}
      - S3_SECRET_KEY=${MINIO_SECRET_KEY}
      - S3_ACCESS_KEY=${MINIO_ACCESS_KEY}
      - S3_CUSTOM_URL=${S3_CUSTOM_URL}
    #    ports:
    #      - "8080:8080"
    depends_on:
      - cms-infra-database
    networks:
      - cms-store-network
  cms-backend-cart:
    build:
      context: ./cms-backend
      dockerfile: Dockerfile
      target: microservice-cart
    restart: unless-stopped
    container_name: cms-backend-cart
    environment:
      - SPRING_DATASOURCE_URL=${SPRING_DATASOURCE_URL_CART_SERVICE}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - KAFKA_BOOTSTRAP_SERVERS=${KAFKA_BOOTSTRAP_SERVERS}
    depends_on:
      - cms-infra-database
    networks:
      - cms-store-network
  cms-doc-swagger:
    build:
      context: ./cms-backend/swagger
      dockerfile: Dockerfile
    restart: unless-stopped
    container_name: cms-doc-swagger
    #    ports:
    #      - "8080:8080"
    depends_on:
      - cms-backend-auth
      - cms-backend-catalog
      - cms-backend-user
    networks:
      - cms-store-network
  cms-backend-notification:
    build:
      context: ./cms-backend
      dockerfile: Dockerfile
      target: microservice-notification
    restart: unless-stopped
    container_name: cms-backend-notification
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=${KAFKA_BOOTSTRAP_SERVERS}
      - IDIGITAL_OTP_SERVICE_KEY=${IDIGITAL_OTP_SERVICE_KEY}
    depends_on:
      - cms-infra-kafka
    networks:
      - cms-store-network


volumes:
  cms-infra-database:
    name: cms-infra-database
  cms-infra-s3:
    name: cms-infra-s3

networks:
  cms-store-network:
    name: cms-store-network