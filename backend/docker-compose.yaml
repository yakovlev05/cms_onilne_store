name: cms-store-backend

services:
  cms-infra-database:
    image: postgres:latest
    restart: unless-stopped
    container_name: cms-infra-database
    env_file:
      - .env
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_USER=${POSTGRES_USER}
    ports:
      - "5432:5432"
    volumes:
      - "./init-db:/docker-entrypoint-initdb.d" # выполнение кастомных скриптов инициализации
      - "cms-infra-database:/var/lib/postgresql/data"
    networks:
      - cms-store-network
  cms-infra-s3:
    image: minio/minio:latest
    restart: unless-stopped
    container_name: cms-infra-s3
    env_file:
      - .env
    environment:
      - MINIO_ROOT_USER=${MINIO_ACCESS_KEY}
      - MINIO_ROOT_PASSWORD=${MINIO_SECRET_KEY}
    command: server /data --console-address ":9001"
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - "cms-infra-s3:/data"
    networks:
      - cms-store-network
  cms-backend-auth:
    build:
      context: ./cms-backend
      dockerfile: Dockerfile
      target: microservice-auth
    restart: unless-stopped
    container_name: cms-backend-auth
    env_file:
      - .env
    environment:
      - SPRING_DATASOURCE_URL=${SPRING_DATASOURCE_URL_AUTH_SERVICE}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - KAFKA_BOOTSTRAP_SERVERS=${KAFKA_BOOTSTRAP_SERVERS}
    #    ports:
    #      - "8080:8080"
    depends_on:
      - cms-infra-database
      - cms-infra-kafka
    networks:
      - cms-store-network
  cms-infra-zookeeper:
    image: confluentinc/cp-zookeeper:latest
    restart: unless-stopped
    container_name: cms-infra-zookeeper
    environment:
      - ZOOKEEPER_CLIENT_PORT=2181
      - ZOOKEEPER_TICK_TIME=2000
    #    ports:
    #      - "22181:2181"
    networks:
      - cms-store-network
  cms-infra-kafka:
    image: confluentinc/cp-kafka:latest
    restart: unless-stopped
    container_name: cms-infra-kafka
    environment:
      - KAFKA_BROKER_ID=1 # уникальный номер инстанса
      - KAFKA_ZOOKEEPER_CONNECT=cms-infra-zookeeper:2181 # подключение к zookeeper
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://cms-infra-kafka:9092,PLAINTEXT_HOST://localhost:29092 # задаются слушатели
      # слушатель PLAINTEXT для внутреннего взаимодействия, PLAINTEXT_HOST для подключений извне
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT # оба типа слушателей используют протокол PLAINTEXT
      - KAFKA_INTER_BROKER_LISTENER_NAME=PLAINTEXT # какой слушатель для внутреннего взаимодействия
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1 # количество реплик
      - KAFKA_CLUSTER_ID=-KhL6czPT5e_oBJQkmSmpA
    ports:
      - "29092:29092"
    depends_on:
      - cms-infra-zookeeper
    networks:
      - cms-store-network
  cms-manage-kafka-ui:
    image: provectuslabs/kafka-ui:latest
    restart: unless-stopped
    container_name: cms-manage-kafka-ui
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=cms-infra-kafka:9092
      - KAFKA_CLUSTERS_0_ZOOKEEPER=cms-infra-zookeeper:2181
      - AUTH_TYPE=LOGIN_FORM
      - SPRING_SECURITY_USER_NAME=admin
      - SPRING_SECURITY_USER_PASSWORD=pass
      - SERVER_SERVLET_CONTEXT_PATH=/kafka-ui
    #    ports:
    #      - "8091:8080"
    depends_on:
      - cms-infra-kafka
    networks:
      - cms-store-network
  cms-infra-nginx:
    image: nginx:latest
    restart: unless-stopped
    container_name: cms-infra-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - "./nginx:/etc/nginx/conf.d"
    depends_on:
      - cms-backend-auth
      #      - cms-backend-user
      - cms-manage-kafka-ui
    networks:
      - cms-store-network
  #  cms-backend-user:
  #    build:
  #      context: ./cms-backend
  #      dockerfile: Dockerfile
  #      target: microservice-user
  #    restart: unless-stopped
  #    container_name: cms-backend-user
  #    env_file:
  #      - .env
  #    environment:
  #      - SPRING_DATASOURCE_URL=${SPRING_DATASOURCE_URL_USER_SERVICE}
  #      - POSTGRES_USER=${POSTGRES_USER}
  #      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
  #      - KAFKA_BOOTSTRAP_SERVERS=${KAFKA_BOOTSTRAP_SERVERS}
  #    #    ports:
  #    #      - "8080:8080"
  #    depends_on:
  #      - cms-infra-database
  #      - cms-infra-kafka
  #    networks:
  #      - cms-store-network
  cms-backend-catalog:
    build:
      context: ./cms-backend
      dockerfile: Dockerfile
      target: microservice-catalog
    restart: unless-stopped
    container_name: cms-backend-catalog
    env_file:
      - .env
    environment:
      - SPRING_DATASOURCE_URL=${SPRING_DATASOURCE_URL_CATALOG_SERVICE}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    #    ports:
    #      - "8080:8080"
    depends_on:
      - cms-infra-database
    networks:
      - cms-store-network
  cms-doc-swagger:
    build:
      context: ./cms-backend/swagger
      dockerfile: Dockerfile
    restart: unless-stopped
    container_name: cms-doc-swagger
#    ports:
#      - "8080:8080"
    depends_on:
      - cms-backend-auth
      - cms-backend-catalog
    networks:
      - cms-store-network


volumes:
  cms-infra-database:
    name: cms-infra-database
  cms-infra-s3:
    name: cms-infra-s3

networks:
  cms-store-network:
    name: cms-store-network